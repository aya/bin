# # check - test script for linux server
 #
# functions override - check_function
# History:
# 20140319 YA : hardware specific information via dmidecode
# 20140312 YA : extract profiles and functions in external files

# default to CHECK_RELEASE version
eval CHECK_RELEASE_${BASH_SOURCE##*/check_}="${CHECK_RELEASE}"

# check binary
function check_binary() {
    # on verifie si le binaire est accessible dans $PATH
    for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        which ${operand} >/dev/null 2>&1
        operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
        [ ${operand_error} -ne 0 ] && echo -n ${CHECK_ERROR} || echo -n ${CHECK_OK}
        echo -n " "
    done
    echo
    [ ${error:-0} -ne 0 ] && error=${CHECK_ERROR_NOT_FOUND_BINARY}
    return ${error:-0}
}

# hostname
function check_hostname() {
    check hostname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    # fails on centos
    # hostname -s 2>/dev/null
    hostname 2>/dev/null |sed 's/\..*//'
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# ifconfig
function check_ip_addresses() {
    check ifconfig || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    addresses="$(ifconfig 2>/dev/null |awk '/inet adr/ {print $2}' |sed 's/adr:\([0-9.]\)/\1/')"
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    echo ${addresses}
    return ${error:-0}
}

# ifconfig eth0
function check_ip_address() {
    check ifconfig || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        case "${operand}" in
            *.*.*.*)
                ifconfig 2>/dev/null |awk '/inet adr/ {print $2}' |sed 's/adr:\([0-9.]\)/\1/' |grep "${operand}" >/dev/null
                operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
                [ ${operand_error} -ne 0 ] && echo -n ${CHECK_ERROR} || echo -n ${CHECK_OK}
                ;;
            *)
                addresses="$(ifconfig ${operand} 2>/dev/null |awk '/inet adr/ {print $2}' |sed 's/adr:\([0-9.]\)/\1/')"
                operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
                echo ${addresses}
                ;;
        esac
        echo -n " "
    done
    echo
    [ ${error:-0} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# check ip format
function check_ip() {
    for operand in $@; do
        declare -a part=( ${operand//\./ } )
        operand_error=0
        [ ${#part[*]} -ne 4 ] && ((operand_error++))
        for p in ${part[@]}; do
            case "$p" in
                *[!0-9]*)
                    # if p is not a digit
                    ((operand_error++))
                    ;;
                *)
                    # if p is a digit
                    ((operand_error += p>>8))
                    ;;
            esac
        done
        [ ${operand_error} -ne 0 ] && echo -n ${CHECK_ERROR} || echo -n ${CHECK_OK}
        [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
        echo -n " "
    done
    echo
    [ ${error:-0} -ne 0 ] && error=${CHECK_RETURN_WARNING}
    return ${error:-0}
}

# kernel date
function check_kernel_date() {
    check uname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    kernel_date="$(uname -v 2>/dev/null |awk '{$1=$2=""; print}')"
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    [ ${CHECK_NUMERIC} ] && echo $(date -d "${kernel_date}" +%s 2>/dev/null) || echo $(date -d "${kernel_date}" +${CHECK_DATE_FORMAT} 2>/dev/null)
    return ${error:-0}
}

# kernel release
function check_kernel_release() {
    check uname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    uname -r 2>/dev/null
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# kernel version
function check_kernel_version() {
    check uname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    uname -v 2>/dev/null
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# last boot time
function check_last_reboot() {
    check utmpdump 2>/dev/null || check last || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    last_reboot="$(utmpdump /var/log/wtmp 2>/dev/null |awk '$0 ~ /reboot/ {print $(NF-4)" "$(NF-3)" "$(NF-2)" "$(NF-1)}' |tail -1 || last reboot -F 2>/dev/null |head -1 |awk '{print $5" "$6" "$7" "$8" "$9}' || last reboot 2>/dev/null |head -1 |awk '{print $5" "$6" "$7" "$8}')"
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    [ ${CHECK_NUMERIC} ] && echo $(date -d "${last_reboot}" +%s 2>/dev/null) || echo $(date -d "${last_reboot}" +${CHECK_DATE_FORMAT} 2>/dev/null)
    return ${error:-0}
}

# number of files, unique files, threads and sockets opened by a process
function check_open_files() {
    check pidof || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        open_files=$(for pid in $(/sbin/pidof ${operand} 2>/dev/null); do ls -l /proc/${pid}/fd 2>/dev/null |sed 1d; done |wc -l)
        operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
        [ -n "${open_files}" ] && echo -n "${open_files} "
    done
    echo
    [ ${CHECK_EXTENDED} ] && for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        pidof ${operand} >/dev/null 2>&1 && echo && ps -eLf |awk 'BEGIN {totalfiles=0; totalufiles=0; totalthreads=0; totalsockets=0} $10 ~ /'${operand}'/ {user[$2]=$1; date[$2]=$7; thread[$2]+=1} END { for (pid in user) {files="ls -l /proc/"pid"/fd 2>/dev/null |sed 1d |wc -l"; files |getline openfiles[pid]; ufiles="ls -l /proc/"pid"/fd 2>/dev/null |sed 1d |cut -d\" \" -f 11 |grep -vE \"(socket)\" |sort -u |wc -l"; ufiles |getline uniquefiles[pid]; sockets="ls -l /proc/"pid"/fd 2>/dev/null |cut -d\" \" -f 11 |grep -E \"(socket)\" |sort -u |wc -l"; sockets |getline opensockets[pid]; totalopenfiles+=openfiles[pid]; totaluniquefiles+=uniquefiles[pid]; totalthreads+=thread[pid]; totalopensockets+=opensockets[pid]; print "user: "user[pid]", pid: "pid", date: "date[pid]", fichiers: "openfiles[pid]", uniques: "uniquefiles[pid]", threads: "thread[pid]", sockets: "opensockets[pid]}; print "TOTAL '${operand}' ... fichiers: "totalopenfiles", uniques: "totaluniquefiles", threads: "totalthreads", sockets: "totalopensockets}' 
        operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
    done
    [ ${error:-0} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# operating system
function check_operating_system() {
    check uname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    uname -o 2>/dev/null 2>/dev/null
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# service is running
function check_pidof() {
    check ps pidof lsof || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        # search with pidof, ps, or lsof 
        # $operand looks like : process_to_search:type_of_search:column_to_search:word_to_search
        input=($(echo $operand |awk 'BEGIN{FS=":"} {print $1" "$2" "$3" "$4}'))
        # input is an array with process, type, column and word to search
        process_to_search=${input[0]}
        type_of_search=${input[1]}
        column_to_search=${input[2]}
        word_to_search=${input[3]}
        # search_pid_command depends on type_of_search
        # default : $(pidof $process_to_search)
        # ps : $(ps ax |awk '$5 ~ /$process_to_search/ && $column_to_search ~ /$word_to_search/ {print $1}')
        # lsof : $(lsof -p $(pidof $process_to_search) |awk '/$word_to_search/ {print $9}')
        #
        # default search command is pidof
        search_pid_command="pidof ${process_to_search}"
        # if type ps
        [ "${type_of_search}" = 'ps' ] && [ -z "${column_to_search}" ] && search_pid_command="ps ax |awk '\$5 ~ /${process_to_search}/ {print \$1}'"
        [ "${type_of_search}" = 'ps' ] && [ -n "${column_to_search}" ] && [ -z "${word_to_search}" ] && search_pid_command="ps ax |awk '\$5 ~ /${process_to_search}/ && \$${column_to_search} ~ /${process_to_search}/ {print \$1}'"
        [ "${type_of_search}" = 'ps' ] && [ -n "${column_to_search}" ] && [ -n "${word_to_search}" ] && search_pid_command="ps ax |awk '\$5 ~ /${process_to_search}/ && \$${column_to_search} ~ /${word_to_search}/ {print \$1}'"
        # if type lsof
        [ "${type_of_search}" = 'lsof' ] && [ -n "${column_to_search}" ] && [ -n "${word_to_search}" ] && search_pid_command="ps ax |awk '\$5 ~ /${process_to_search}/ {print \$1}' |while read pid; do lsof -p \${pid} |awk '\$${column_to_search} ~ /${word_to_search}/ {print \$2}'; done"
        # process the command
        process_pid=$(sh -c "${search_pid_command}" 2>/dev/null)
        operand_error=$?
        # test error if output is empty 
        [ -z "${process_pid}" ] && operand_error=1
        [ -z "${process_pid}" ] && echo -n ${CHECK_ERROR}
        [ -n "${process_pid}" ] && [ ! ${CHECK_NUMERIC} ] && echo -n ${CHECK_OK}
        [ -n "${process_pid}" ] && [ ${CHECK_NUMERIC} ] && echo -n ${process_pid}
        [ ${operand_error:-0} -gt ${error:-0} ] && error=${operand_error}
        echo -n " "
    done
    echo
    [ ${error:-0} -ne 0 ] && error=${CHECK_ERROR_NOT_FOUND_PROCESS}
    return ${error:-0}
}

# processor type
function check_processor_type() {
    check uname || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    uname -p 2>/dev/null 2>/dev/null
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# system install date 
function check_system_date() {
    check rpm 2>/dev/null || check dpkg 2>/dev/null || return ${CHECK_ERROR_NOT_FOUND_BINARY}
    install_date="$(rpm -q basesystem --queryformat '%{installtime}' 2>/dev/null)" \
    || install_date=$(date -d "$(LANG=en_EN ls -alt /var/lib/dpkg/info/*.list 2>/dev/null |tail -1 |awk '{print $6" "$7" "$8}')" +%s 2>/dev/null) \
    || install_date=$(date -d "$(LANG=en_EN ls -alt /var/log/installer/ 2>/dev/null |tail -1 |awk '{print $6" "$7" "$8}')" +%s 2>/dev/null) \
    || install_date=$(date -d "$(LANG=en_EN ls -alt / 2>/dev/null |tail -1 |awk '{print $6" "$7" "$8}')" +%s 2>/dev/null)
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    [ ${CHECK_NUMERIC} ] && echo ${install_date} || echo $(date -d @${install_date} +${CHECK_DATE_FORMAT} 2>/dev/null)
    return ${error:-0}
}

# number of open files
function check_system_open_files() {
    cat /proc/sys/fs/file-nr 2>/dev/null |awk '{print $1}'
    error=$? && [ ${error} -ne 0 ] && echo ${CHECK_ERROR} && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# system release
function check_system_release() {
    lsb_release -d 2>/dev/null |sed 's/^Description:[[:blank:]]*//' \
    || cat /etc/redhat-release 2>/dev/null \
    || cat /etc/debian_version 2>/dev/null
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}

# tcp connection over ssl
function check_ssl() {
    SSL=1 check_tcp $@
}

# tcp connection over tls
function check_starttls() {
    STARTTLS=1 check_tls $@
}

# tcp connection over tls
function check_starttls_ftp() {
    PROT=ftp check_starttls $@
}

# tcp connection over tls
function check_starttls_imap() {
    PROT=imap check_starttls $@
}

# tcp connection over tls
function check_starttls_pop3() {
    PROT=pop3 check_starttls $@
}

# tcp connection over tls
function check_starttls_smtp() {
    PROT=smtp check_starttls $@
}

# tcp connection over tls
function check_starttls_xmpp() {
    PROT=xmpp check_starttls $@
}

# tcp connection over tls
function check_tls() {
    TLS=1 check_ssl $@
}

# tcp connection
function check_tcp() {
    for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
        case "${operand}" in
            *:*)
                host=${operand%%:*}
                port=${operand##*:}
                ;;
            *)
                port=${operand}
                ;;
        esac
        which nc >/dev/null 2>&1 && check_tcp_command="nc -w 1 ${host:-127.0.0.1} ${port} </dev/null"
        which timeout >/dev/null 2>&1 && TIMEOUT="timeout 1"
        [ ${STARTTLS} ] && starttls="-starttls ${PROT:-smtp}"
        [ ${TLS} ] && tls="-tls1"
        [ ${SSL} ] && which openssl >/dev/null 2>&1 && check_tcp_command="${TIMEOUT:-} openssl s_client -connect ${host:-127.0.0.1}:${port} ${tls:-} ${starttls:-} </dev/null 2>&1 |grep CERTIFICATE"
        [ -z "${check_tcp_command}" ] && error=${CHECK_ERROR_NOT_FOUND_BINARY} && echo -n ${CHECK_ERROR} && continue
        sh -c "${check_tcp_command}" >/dev/null 2>&1
        operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${CHECK_ERROR_CONNECTION_FAILED}
        [ ${operand_error} -ne 0 ] && echo -n ${CHECK_ERROR} || echo -n ${CHECK_OK}
        echo -n " "
    done
    echo
    return ${error:-0}
}

# https connection
function check_https_tls() {
    TLS=1 check_https $@
}

# https connection
function check_https() {
    SSL=1 check_http $@
}

# http connection
function check_http() {
    # for operand in ${@//,/ } ${CHECK_OPERAND//,/ }; do
    # for operand in ${@:-127.0.0.1} ${CHECK_OPERAND}; do
    # FIXED: accept multiple port/url in operand
    for operand in $@ ${CHECK_OPERAND}; do
        hostname=""; addr=""; host=""; port=""; url=""; pattern=""
        # extract hostname, port, url, and pattern from the operand
        # hostname can be an expression like user:pass@host#addr
        case "${operand}" in
            # hostname:port/url~pattern
            *:*/*~*)
                # ":" can be used twice, for user:pass or hostname:port
                case "${operand}" in
                    # user:pass@host:port/url~pattern == hostname:port/url~pattern
                    *@*:*)
                        hostname=${operand%:*}
                        port_url_pattern=${operand##*:}
                        port=${port_url_pattern%%/*}
                        url_pattern=${port_url_pattern#*/}
                        url="/${url_pattern%%~*}"
                        pattern=${operand##*~}
                        ;;
                    # user:pass@host/url~pattern == hostname/url~pattern
                    *:*@*)
                        hostname=${operand%%/*}
                        url_pattern=${operand#*/}
                        url="/${url_pattern%%~*}"
                        pattern=${operand##*~}
                        [ ${SSL} ] && port=443 || port=80
                        ;;
                    # host:port/url~pattern == hostname:port/url~pattern
                    *:*)
                        hostname=${operand%:*}
                        port_url_pattern=${operand##*:}
                        port=${port_url_pattern%%/*}
                        url_pattern=${port_url_pattern#*/}
                        url="/${url_pattern%%~*}"
                        pattern=${operand##*~}
                        ;;
                esac
                ;;
            # hostname:port/url
            *:*/*)
                # ":" can be used twice, for user:pass or hostname:port
                case "${operand}" in
                    # user:pass@host:port/url == hostname:port/url
                    *@*:*)
                        hostname=${operand%:*}
                        port_url=${operand##*:}
                        port=${port_url%%/*}
                        url="/${port_url#*/}"
                        ;;
                    # user:pass@host/url == hostname/url
                    *:*@*)
                        hostname=${operand%%/*}
                        url="/${operand#*/}"
                        [ ${SSL} ] && port=443 || port=80
                        ;;
                    # host:port/url == hostname:port/url
                    *:*)
                        hostname=${operand%:*}
                        port_url=${operand##*:}
                        port=${port_url%%/*}
                        url="/${port_url#*/}"
                        ;;
                esac
                ;;
            # hostname:port~pattern
            *:*~*)
                # ":" can be used twice, for user:pass or hostname:port
                case "${operand}" in
                    # user:pass@host:port~pattern == hostname:port~pattern
                    *@*:*)
                        hostname=${operand%:*}
                        port_pattern=${operand##*:}
                        port="${port_pattern%%~*}"
                        pattern=${port_pattern##*~}
                        ;;
                    # user:pass@host~pattern == hostname~pattern
                    *:*@*)
                        hostname=${operand%%~*}
                        pattern=${operand##*~}
                        ;;
                    # host:port~pattern == hostname:port~pattern
                    *:*)
                        hostname=${operand%:*}
                        port_pattern=${operand##*:}
                        port="${port_pattern%%~*}"
                        pattern=${port_pattern##*~}
                        ;;
                esac
                ;;
            # hostname/url~pattern
            */*~*)
                hostname=${operand%%/*}
                url_pattern=${operand#*/}
                url="/${url_pattern%%~*}"
                pattern=${url_pattern##*~}
                [ ${SSL} ] && port=443 || port=80
                ;;
            # hostname~pattern
            *~*)
                hostname=${operand%%~*}
                pattern=${operand##*~}
                [ ${SSL} ] && port=443 || port=80
                ;;
            # hostname/url
            */*)
                hostname=${operand%%/*}
                url="/${operand#*/}"
                [ ${SSL} ] && port=443 || port=80
                ;;
            # hostname:port
            *:*)
                # ":" can be used twice, for user:pass or hostname:port
                case "${operand}" in
                    # user:pass@host:port == hostname:port
                    *@*:*)
                        hostname=${operand%:*}
                        port=${operand##*:}
                        ;;
                    # user:pass@host == hostname
                    *:*@*)
                        hostname=${operand}
                        [ ${SSL} ] && port=443 || port=80
                        ;;
                    # host:port == hostname:port
                    *:*)
                        hostname=${operand%:*}
                        port=${operand##*:}
                        ;;
                esac
                ;;
            # hostname
            *)
                hostname=${operand}
                [ ${SSL} ] && port=443 || port=80
                ;;
        esac

# echo
# echo "operand: "${operand}
# echo "hostname: "$hostname
# echo "user: "$user
# echo "pass: "$pass
# echo "host: "$host
# echo "addr: "$addr
# echo "port: "$port
# echo "url: "$url
# echo "pattern: "$pattern

        # check the hostname to get the user, pass, host, and addr
        case "${hostname}" in
            # user:pass@host#addr
            *:*@*#*)
                user=${hostname%:*}
                pass_host_addr=${hostname##*:}
                pass=${pass_host_addr%%@*}
                host_addr=${pass_host_addr#*@}
                host="${host_addr%%#*}"
                addr=${hostname##*#}
                ;;
            # user@host#addr
            *@*#*)
                user=${hostname%%@*}
                host_addr=${hostname#*@}
                host="${host_addr%%#*}"
                addr=${host_addr##*#}
                ;;
            # user:pass@host
            *:*@*)
                user=${hostname%:*}
                pass_host=${hostname##*:}
                pass=${pass_host%%@*}
                host="${pass_host#*@}"
                ;;
            # user@host
            *@*)
                user=${hostname%%@*}
                host=${hostname#*@}
                ;;
            # host#addr
            *#*)
                host=${hostname%%#*}
                addr=${hostname#*#}
                ;;
            # host
            *)
                host=${hostname}
                ;;
        esac
        [ -z "${addr}" ] && addr="${host}"

# echo
# echo "operand: "${operand}
# echo "hostname: "$hostname
# echo "user: "$user
# echo "pass: "$pass
# echo "host: "$host
# echo "addr: "$addr
# echo "port: "$port
# echo "url: "$url
# echo "pattern: "$pattern

        # check if port is an integer
        [ -z "${port##*[!0-9]*}" ] && error=${CHECK_ERROR_UNDEFINED} && return ${error:-0}

        which nc >/dev/null 2>&1 && check_http_command="nc -w 1 ${addr:-127.0.0.1} ${port:-80}"
        which timeout >/dev/null 2>&1 && TIMEOUT="timeout 1"
        [ ${TLS} ] && tls="-tls1"
        [ ${SSL} ] && which openssl >/dev/null 2>&1 && check_http_command="${TIMEOUT:-} openssl s_client -quiet -connect ${addr:-127.0.0.1}:${port:-443} ${tls:-}"
        [ -z "${check_http_command}" ] && error=${CHECK_ERROR_NOT_FOUND_BINARY} && echo -n ${CHECK_ERROR} && continue
        check_http_command="echo -e 'GET ${url:-/} HTTP/1.0\nHost: ${host:-localhost}\nUser-Agent: $(basename $0) v${CHECK_RELEASE}\n\n' |${check_http_command}"
        # echo ${check_http_command}
        exec 4>&1 5>&2
        EPOCH=$( TIMEFORMAT='%R'; { time eval "${check_http_command}" 2>/dev/null |while read line; do
        # echo $line
            [ ${cpt:-0} -eq 0 ] && check_http_return=(${line}) && \
            check_http_return_protocol=${check_http_return[0]} && \
            check_http_return_code=${check_http_return[1]} && \
            check_http_return_message=${check_http_return[2]}
            case "${line}" in
                *${pattern:-}*)
                    for valid_code in ${CHECK_VALID_RESPONSE_CODE_HTTP}; do
                        # we are in a subshell, so we have to return a specific code (42) to tell that we found the pattern
                        [ ${check_http_return_code:-0} -eq ${valid_code} ] && return 42
                    done
                    return ${CHECK_ERROR_RESPONSE_CODE}
                    ;;
            esac
            # echo line $cpt: $line
            cpt=$((${cpt} + 1))
        done 1>&4 2>&5; } 2>&1)
        # if subshell returned 42, then pattern has been found
        operand_error=$? && [ ${operand_error} -ne 42 ] && error=${operand_error} && echo -n ${CHECK_ERROR} || echo -n ${CHECK_OK}
        # if subshell returned 0, then pattern has not been found
        [ ${operand_error} -eq 0 ] && error=${CHECK_ERROR_NOT_FOUND_PATTERN}
        # if subshell returned 1, then tcp connection has failed
        [ ${operand_error} -eq 1 ] && error=${CHECK_ERROR_CONNECTION_FAILED}
        exec 4>&- 5>&-
        [ ${CHECK_EXTENDED} ] && echo -n " (elapsed_time: $EPOCH)"
        echo -n " "
    done
    echo
    return ${error:-0}
}

# check version
function check_version() {
    echo ${CHECK_RELEASE}
    error=$? && [ ${error} -ne 0 ] && error=${CHECK_ERROR_UNDEFINED}
    return ${error:-0}
}
