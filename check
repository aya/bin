#!/bin/bash
#
# # check - test script for linux server
 #
# Author: Yann Autissier <yann.autissier@anotherservice.com>
#
# History:
# 20141024 YA : bugfixes, nagios return codes
# 20140416 YA : move function and profile files in a shared directory
# 20140408 YA : use same code for local and remote check
# 20140310 YA : extract profiles and functions in external files
# 20140224 YA : release 1.0
# 20140128 YA : cygwin compatibility, expect and pop command support for ssh connections
# 20140108 YA : table formated output for account_* checks
# 20131224 YA : remote execution
# 20131219 PT : check_disk_stats replace device selection test to permit to get stat for dm-99
# 20131211 YA : table formated output for account_lastlog
# 20131021 YA : iostat implementation, PATH variable for crontab calls
# 20130923 YA : call tests with syntax like function_name_operand or function_name://operand
# 20130917 YA : tcp, ssl, http, https connections
# 20130910 YA : bash v2 compatibility
# 20130826 YA : wget profiles and functions from remote files
# 20130824 YA : pass arguments to tests, call restart on failed tests, factorize functions
# 20130823 YA : get profile from hostname, summary output for supervision, debian support
# 20130821 YA : user account list
# 20130819 YA : package information
# 20130816 YA : define group of tests in profiles
# 20130814 YA : check open files for DB2, numeric output for supervision
# 20130731 YA : first version for redhat, check few services
#
# TODO: nagios exit status compatibility
# TODO: support multiple users for ssh connections
# TODO: check smtp, smtps, pop3, pop3s, imap, imaps, smtp with antivirus, smtp auth, mysql, mssql, snmp, dhcp, dns, ldap, ldaps,
#          disk_free, cpu, processes, memory, load_average, uptime, tcp_connections, ping, ssh, authorized_keys, redhat subscription
#          liste des applis, liste des ports, listes des machines connectees (=audit rapide)
# TODO: ./check -H root@10.10.10.20 hostname
#           ksh: syntax error: `(' unexpected

# # CONFIGS
 #
#
CHECK_RELEASE="1.0.7"
CHECK_PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin"
CHECK_DIR="/usr/share/check"
CHECK_TMP="/tmp"
PATH="${PATH}:${CHECK_PATH}"

# # REMOTE UPDATE
 #
# this script
CHECK_UPDATE_URL="https://raw.githubusercontent.com/aya/bin/master/check"
# function files list
CHECK_UPDATE_LIST_FUNCTION="account disk cve_2014 hardware package"
# profile files list
CHECK_UPDATE_LIST_PROFILE=""

# date format
CHECK_DATE_FORMAT="%d/%m/%Y"

# wget version
CHECK_WGET_OPTION="-T 3 --proxy=off -q"

# hostname
HOSTNAME=$(hostname 2>/dev/null |tr '[a-z]' '[A-Z]')
HOSTNAME=${HOSTNAME%%.*}

# table columns
CHECK_FIELD_UID='uid'
CHECK_FIELD_GID='gid'
CHECK_FIELD_DATE='date'
CHECK_FIELD_ACCOUNT='account'
CHECK_FIELD_ADDRESS='address'
CHECK_FIELD_LASTLOG='last_login'
CHECK_FIELD_DESCRIPTION='description'
CHECK_FIELD_LOGIN_SHELL='shell'
CHECK_FIELD_LOGIN_STATUS='status'
CHECK_FIELD_LOGIN_SERVICES='services'
CHECK_FIELD_PASSWORD_TYPE='password'

# # ERRORS
 #
# error codes
exit=0
CHECK_RETURN_OK=0
CHECK_RETURN_WARNING=1
CHECK_RETURN_CRITICAL=2
CHECK_RETURN_UNKNOWN=3
CHECK_ERROR_NOT_FOUND_BINARY=10
CHECK_ERROR_NOT_FOUND_TEST=11
CHECK_ERROR_NOT_FOUND_PROCESS=12
CHECK_ERROR_NOT_FOUND_PACKAGE=13
CHECK_ERROR_NOT_FOUND_PATTERN=14
CHECK_ERROR_NOT_FOUND_SERVICE=15
CHECK_ERROR_HOST_DOWN=40
CHECK_ERROR_CONNECTION_FAILED=41
CHECK_ERROR_RESPONSE_CODE=42
CHECK_ERROR_UPDATE_FAILED=121
CHECK_ERROR_UNDEFINED=123
CHECK_ERROR_LOCKED=124

CHECK_VALID_RESPONSE_CODE_HTTP="200 301 302"
CHECK_VALID_RESPONSE_CODE_SMTP="200"

# error code goes through pipes (need bash >= 3)
[ ${BASH_VERSION:0:1} -ge 3 ] && set -o pipefail

# #
 #
# OS specific
check_os="$(uname -o 2>/dev/null)"
case "${check_os}" in
    GNU/Linux)
        ping_opt="-c 1"
        ;;
    Cygwin)
        ping_opt="-n 1"
        PATH="${PATH}:$(cygpath --unix ${SYSTEMROOT}/system32)"
        ;;
    *)
        echo "ERROR: Unable to find your OS ! Are you really running on a GNU/Linux system ?" >&2 && exit ${CHECK_ERROR_UNDEFINED}
        ;;
esac

# # HELP
 #
# function usage: print help message
function usage() {
    echo "Usage: $0 [options] test [test [...]]
Tests de serveurs linux - v${CHECK_RELEASE}

options:
    -a, --all               lance tous les tests connus
    -c, --check             ajoute le test en cours dans le prefixe des listes au format tableur
    -d, --debug             active la mode de deboggage
    -e, --extended          affiche des informations detaillees pour certains tests
    -f, --field             affiche les entetes des colonnes du format tableur (necessite -t)
    -h, --help              affiche ce message
    -j, --json              affiche les resultats au format json (TODO)
    -l, --list              affiche les jeux de tests de tous les profils
    -la, --list --all       affiche tous les jeux de tests disponibles
    -m, --munin             affiche les resultats au format munin (TODO)
    -n, --numeric           affiche les resultats au format numerique
        --nagios            affiche les resultats au format nagios (TODO)
    -o, --output=<output>   force l'affichage des resultat au format <output>
    -oj, --output=json      affiche les resultats au format json (TODO)
    -om, --output=munin     affiche les resultats au format munin (TODO)
    -on, --output=nagios    affiche les resultats au format nagios (TODO)
    -onum, --output=numeric affiche les resultats au format numerique
    -ot, --output=table     affiche les resultats au format tableur
    -ox, --output=xml       affiche les resultats au format xml (TODO)
    -q, --quiet             active le mode silencieux
    -r, --return-char       affiche les resultats sur une ligne separes par un retour chariot
    -s, --summary           affiche la liste des tests en erreur
    -t, --table             affiche les resultats au format tableur
    -u, --update            force la mise a jour des fichiers de profiles et de fonctions
    -v, --version           affiche la version
    -w, --password          demande un mot de passe pour se connecter aux serveurs distants
    -x, --xml               affiche les resultats au format xml (TODO)
    -H, --host=<host>       lance les tests sur le <host> distant
    -O, --operand=<operand> passe un argument <operand> a tous les tests
    -P, --profile=<profil>  utilise le jeu de test defini pour le <profil>
        --prefix=<prefix>   utilise le <prefix> dans l'affichage des listes au format tableur
        --no-prefix         affiche les listes au format tableur sans prefixe
        --prefix=<prefix>%prefix%    ajoute le <prefix> au %prefix% existant
    -U, --user=<user>       se connecte aux serveurs distants avec l'utilisateur <user>
    -W, --password=<passwd> se connecte aux serveurs distants avec le mot de passe <passwd>
"
}

# # OPTIONS
 #
# check options
while getopts "acdefhjlmno:pqrstuvwxH:O:P:U:W:-:" Option; do
    case "$Option" in
        -)
            case $OPTARG in
                all)
                    CHECK_ALL=1
                    ;;
                check)
                    CHECK_ADD=1
                    ;;
                debug)
                    set -x
                    CHECK_DEBUG=1
                    ;;
                extended)
                    CHECK_EXTENDED=1
                    ;;
                field)
                    CHECK_FIELD=1
                    ;;
                help)
                    CHECK_HELP=1
                    ;;
                host)
                    CHECK_HOST="${CHECK_HOST} ${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                host=*)
                    CHECK_HOST="${CHECK_HOST} ${OPTARG#*=}"
                    ;;
                json)
                    CHECK_OUTPUT="json"
                    ;;
                list)
                    CHECK_LIST=1
                    ;;
                munin)
                    CHECK_OUTPUT="munin"
                    ;;
                nagios)
                    CHECK_OUTPUT="nagios"
                    ;;
                numeric)
                    CHECK_OUTPUT="numeric"
                    CHECK_NUMERIC=1
                    ;;
                operand)
                    CHECK_OPERAND="${CHECK_OPERAND} ${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                operand=*)
                    CHECK_OPERAND="${CHECK_OPERAND} ${OPTARG#*=}"
                    ;;
                output)
                    [ "${!OPTIND}" = "table" ] && CHECK_TABLE=1
                    [ "${!OPTIND}" = "numeric" ] && CHECK_NUMERIC=1
                    CHECK_OUTPUT="${CHECK_OUTPUT} ${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                output=*)
                    [ "${OPTARG#*=}" = "table" ] && CHECK_TABLE=1
                    [ "${OPTARG#*=}" = "numeric" ] && CHECK_NUMERIC=1
                    CHECK_OUTPUT="${CHECK_OUTPUT} ${OPTARG#*=}"
                    ;;
                password)
                    CHECK_PASSWORD=$((${CHECK_PASSWORD:-0} + 1))
                    ;;
                password=*)
                    PASSWORD="${PASSWORD} ${OPTARG#*=}"
                    ;;
                no-prefix)
                    CHECK_NO_PREFIX=1
                    ;;
                prefix)
                    CHECK_PREFIX="${CHECK_PREFIX} ${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                prefix=*)
                    CHECK_PREFIX="${CHECK_PREFIX} ${OPTARG#*=}"
                    ;;
                profile)
                    CHECK_PROFILE="${CHECK_PROFILE} PROFILE_${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                profile=*)
                    CHECK_PROFILE="${CHECK_PROFILE} PROFILE_${OPTARG#*=}"
                    ;;
                quiet)
                    CHECK_QUIET=1
                    ;;
                return-char)
                    CHECK_RETURN=1
                    ;;
                summary)
                    CHECK_SUMMARY=1
                    ;;
                table)
                    CHECK_OUTPUT="table"
                    CHECK_TABLE=1
                    ;;
                update)
                    CHECK_UPDATE=$((${CHECK_UPDATE:-0} + 1))
                    ;;
                user)
                    CHECK_USER="${CHECK_USER} ${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                user=*)
                    CHECK_USER="${CHECK_USER} ${OPTARG#*=}"
                    ;;
                version)
                    CHECK_VERSION=1
                    ;;
                xml)
                    CHECK_OUTPUT="xml"
                    ;;
                *)
                    usage
                    exit 0
                    ;;
            esac
            ;;
        a)
            CHECK_ALL=1
            ;;
        c)
            CHECK_ADD=1
            ;;
        d)
            set -x
            CHECK_DEBUG=1
            ;;
        e)
            CHECK_EXTENDED=1
            ;;
        f)
            CHECK_FIELD=1
            ;;
        h)
            CHECK_HELP=1
            ;;
        H)
            CHECK_HOST="${CHECK_HOST} ${OPTARG}"
            ;;
        j)
            CHECK_OUTPUT="json"
            ;;
        l)
            CHECK_LIST=1
            ;;
        m)
            CHECK_OUTPUT="munin"
            ;;
        n)
            CHECK_OUTPUT="numeric"
            CHECK_NUMERIC=1
            ;;
        o)
            case ${OPTARG} in
                j|json)
                    CHECK_OUTPUT="${CHECK_OUTPUT} json"
                    ;;
                m|munin)
                    CHECK_OUTPUT="${CHECK_OUTPUT} munin"
                    ;;
                n|nagios)
                    CHECK_OUTPUT="${CHECK_OUTPUT} nagios"
                    ;;
                num|numeric)
                    CHECK_OUTPUT="${CHECK_OUTPUT} numeric"
                    CHECK_NUMERIC=1
                    ;;
                t|table)
                    CHECK_OUTPUT="${CHECK_OUTPUT} table"
                    CHECK_TABLE=1
                    ;;
                x|xml)
                    CHECK_OUTPUT="${CHECK_OUTPUT} xml"
                    ;;
                *)
                    CHECK_OUTPUT="${CHECK_OUTPUT} ${OPTARG}"
                    ;;
            esac
            ;;
        O)
            CHECK_OPERAND="${CHECK_OPERAND} ${OPTARG}"
            ;;
        P)
            CHECK_PROFILE="${CHECK_PROFILE} PROFILE_${OPTARG}"
            ;;
        q)
            CHECK_QUIET=1
            ;;
        r)
            CHECK_RETURN=1
            ;;
        s)
            CHECK_SUMMARY=1
            ;;
        t)
            CHECK_OUTPUT="table"
            CHECK_TABLE=1
            ;;
        u)
            CHECK_UPDATE=$((${CHECK_UPDATE:-0} + 1))
            ;;
        U)
            CHECK_USER="${CHECK_USER} ${OPTARG}"
            ;;
        v)
            CHECK_VERSION=1
            ;;
        w)
            CHECK_PASSWORD=$((${CHECK_PASSWORD:-0} + 1))
            ;;
        W)
            PASSWORD="${PASSWORD} ${OPTARG}"
            ;;
        x)
            CHECK_OUTPUT="xml"
            ;;
        *)
            usage
            exit 0
            ;;
    esac
done
shift $(($OPTIND - 1))

# #
 #
# process options
# set debug
[ ${CHECK_DEBUG} ] && set -x
# show help
[ ${CHECK_HELP} ] && usage && exit 0
# show version
[ ${CHECK_VERSION} ] && echo "$(basename $0) v${CHECK_RELEASE}" && exit 0
# return char
[ ${CHECK_RETURN} ] && CHECK_RETURN_CHAR='\\n' || CHECK_RETURN_CHAR='\n'
# on prepare le separateur de champ, pour afficher les elements sur une seule ligne ou un element par ligne
[ ${CHECK_RETURN} ] || [ ${CHECK_TABLE} ] && CHECK_SEPARATOR=${CHECK_RETURN_CHAR} || CHECK_SEPARATOR=" "
# output numeric values for nagios
[ ${CHECK_NUMERIC} ] && CHECK_OK=1 || CHECK_OK="OK"
[ ${CHECK_NUMERIC} ] && CHECK_ERROR=0 || CHECK_ERROR="ERROR"

#
CHECK_TABLE_FIELD_PREFIX="\"hostname\";"
[ ${CHECK_ADD} ] && CHECK_TABLE_FIELD_PREFIX="\"hostname\";\"check\";"
CHECK_TABLE_PREFIX="\"%CHECK_HOSTNAME%\";"
[ ${CHECK_ADD} ] && CHECK_TABLE_PREFIX="\"%CHECK_HOSTNAME%\";\"%CHECK_FUNCNAME%\";"
CHECK_TABLE_FIELD_ACCOUNT='"'${CHECK_FIELD_ACCOUNT}'";'
CHECK_TABLE_FIELD_LASTLOG="\"${CHECK_FIELD_LASTLOG}\";"
CHECK_TABLE_FIELD_ADDRESS="\"${CHECK_FIELD_ADDRESS}\";"
CHECK_TABLE_FIELD_UID="\"${CHECK_FIELD_UID}\";"
CHECK_TABLE_FIELD_GID="\"${CHECK_FIELD_GID}\";"
CHECK_TABLE_FIELD_DATE="\"${CHECK_FIELD_DATE}\";"
CHECK_TABLE_FIELD_DESCRIPTION="\"${CHECK_FIELD_DESCRIPTION}\";"
CHECK_TABLE_FIELD_LOGIN_SHELL="\"${CHECK_FIELD_LOGIN_SHELL}\";"
CHECK_TABLE_FIELD_LOGIN_STATUS="\"${CHECK_FIELD_LOGIN_STATUS}\";"
CHECK_TABLE_FIELD_PASSWORD_TYPE="\"${CHECK_FIELD_PASSWORD_TYPE}\";"
CHECK_TABLE_FIELD_LOGIN_SERVICES="\"${CHECK_FIELD_LOGIN_SERVICES}\";"

# #
 #
# function check: used in several functions, exit if binary not found
function check() {
    # on verifie si le binaire est accessible dans $PATH
    error=0
    for operand in $@; do
        /usr/bin/which ${operand} >/dev/null 2>&1
        operand_error=$? && [ ${operand_error} -gt ${error:-0} ] && error=${operand_error}
        [ ${error:-0} -ne 0 ] && echo "ERROR: Unable to find binary ${operand}" >&2 && break
    done
    [ ${error:-0} -ne 0 ] && error=${CHECK_ERROR_NOT_FOUND_BINARY}
    return ${error:-0}
}

# #
 #
# check needed binaries
check awk sed grep cat cut ls date id xargs || exit ${CHECK_ERROR_NOT_FOUND_BINARY}
if [ -n "${CHECK_HOST}" ]; then
    check ping ssh || exit ${CHECK_ERROR_NOT_FOUND_BINARY}
fi

# # REMOTE UPDATE
 #
# update files from remote host
[ ${CHECK_UPDATE:-0} -ge 1 ] && {
    check wget || exit ${CHECK_ERROR_NOT_FOUND_BINARY}
    [ -d "${CHECK_DIR}" ] || mkdir -p "${CHECK_DIR}" || exit ${CHECK_ERROR_UNDEFINED}

    # list of files to update
    CHECK_UPDATE_LIST="function"
    for file in ${CHECK_UPDATE_LIST_FUNCTION}; do
        CHECK_UPDATE_LIST="${CHECK_UPDATE_LIST} function_${file}"
    done
    CHECK_UPDATE_LIST="${CHECK_UPDATE_LIST} profile"
    for file in ${CHECK_UPDATE_LIST_PROFILE}; do
        CHECK_UPDATE_LIST="${CHECK_UPDATE_LIST} profile_${file}"
    done

    # update function and profile files
    for file in ${CHECK_UPDATE_LIST}; do
        check_update_file_url="${CHECK_UPDATE_URL}_${file}"
        check_tmp_file="${CHECK_TMP}/.$(basename $0)_${file}.$$"
        check_file="${CHECK_DIR}/$(basename $0)_${file}"
        # get file from remote host
        wget ${CHECK_WGET_OPTION} "${check_update_file_url}" -O "${check_tmp_file}" 2>/dev/null || echo "WARNING: Unable to wget ${check_update_file_url}" >&2
        # if downloaded file is not empty, overwrite local file
        [ -s "${check_tmp_file}" ] && mv "${check_tmp_file}" "${check_file}" && chmod +r ${check_file} || error=${CHECK_ERROR_UPDATE_FAILED}
    done
    # exit if update failed
    [ ${error:-0} -ne 0 ] && echo "ERROR: Update failed !" >&2 && exit ${error} || [ ${CHECK_QUIET} ] || echo "INFO: Update successful"

    # auto update, overwrite this script !
    [ ${CHECK_UPDATE:-0} -gt 1 ] && {
        [ ! ${CHECK_QUIET} ] && echo -n "Do you really want to update this script ? [y/N] : " && read UPDATE
        [ ${CHECK_QUIET:-0} -ne 0 -o "${UPDATE:0:1}" = "Y" -o "${UPDATE:0:1}" = "y" ] && {
            check_tmp_file="${CHECK_TMP}/.$(basename $0).$$"
            wget ${CHECK_WGET_OPTION} "${CHECK_UPDATE_URL}" -O "${check_tmp_file}" 2>/dev/null || error=${CHECK_ERROR_UPDATE_FAILED}
            [ ${error:-0} -ne 0 ] && echo "WARNING: Unable to wget ${CHECK_UPDATE_URL}" >&2 && exit ${error:-0}
            [ ! ${CHECK_QUIET} ] && CHECK_UPDATE_RELEASE=$(awk 'BEGIN {FS="="} $1 == "CHECK_RELEASE" {print $2}' ${check_tmp_file} |sed 's/"//g') && echo -n "Downloaded version : ${CHECK_UPDATE_RELEASE}, Current version : ${CHECK_RELEASE}, continue ? [y/N] : " && read UPDATE_SCRIPT
            [ ${CHECK_QUIET:-0} -ne 0 -o "${UPDATE_SCRIPT:0:1}" = "Y" -o "${UPDATE_SCRIPT:0:1}" = "y" ] && {
                [ -s "${check_tmp_file}" ] && mv "${check_tmp_file}" $0 && chmod +rx $0 || error=${CHECK_ERROR_UPDATE_FAILED}
                [ ${error:-0} -ne 0 ] && echo "ERROR: Self update failed !" >&2 || [ ${CHECK_QUIET} ] || echo "INFO: Self update successful"
            }
        }
    }
    # exit
    exit ${error:-0}
}

# #
 #
# load profiles
for file in {${CHECK_DIR}/$(basename $0),$0}_profile*; do
	[ -e "${file}" ] && { source "${file}" 2>/dev/null || echo "WARNING: Error while loading profiles from file ${file}"; }
done

# list all profiles
[ ${CHECK_LIST} ] && [ ! ${CHECK_ALL} ] && \
    echo "Listing profiles :" && \
    echo DEFAULT: ${PROFILE_DEFAULT:-} && \
    for profile in $(compgen -v PROFILE_); do
       [ "${profile}" = "PROFILE_DEFAULT" ] && continue
       echo ${profile/PROFILE_/}: ${!profile}
    done && exit 0

# load functions
for file in {${CHECK_DIR}/$(basename $0),$0}_function*; do
	[ -e "${file}" ] && { source "${file}" 2>/dev/null || echo "WARNING: Error while loading functions from file ${file}"; }
done

# list all functions
[ ${CHECK_LIST} ] && [ ${CHECK_ALL} ] && \
    compgen -A function check_ |sed 's/^check_//' && \
    exit 0

# # specific local functions
 #
# list all variables
function get_variables() {
    declare 2>/dev/null |awk '$1 ~ /^(CHECK|PROFILE)_/ {print $0}'
}

# list all functions
function get_functions() {
    typeset -f 2>/dev/null
}

# prepare table listing fields
function get_table_field_prefix() {
    if [ ${BASH_VERSION:0:1} -lt 3 ]; then
        table_field_prefix=${1/\\%prefix\\%/${CHECK_TABLE_FIELD_PREFIX}}
    else
        table_field_prefix=${1/\%prefix\%/${CHECK_TABLE_FIELD_PREFIX}}
    fi
    table_field_prefix=${table_field_prefix:-${CHECK_TABLE_FIELD_PREFIX}}
    [ ${CHECK_NO_PREFIX} ] && table_field_prefix=""
}

# prepare table listing prefix
function get_table_prefix() {
    if [ ${BASH_VERSION:0:1} -lt 3 ]; then
        table_prefix=${CHECK_TABLE_PREFIX/\\%CHECK_HOSTNAME\\%/${HOSTNAME%%.*}}
        table_prefix=${table_prefix/\\%CHECK_FUNCNAME\\%/$1}
    else
        table_prefix=${CHECK_TABLE_PREFIX/\%CHECK_HOSTNAME\%/${HOSTNAME%%.*}}
        table_prefix=${table_prefix/\%CHECK_FUNCNAME\%/$1}
    fi
    [ ${CHECK_NO_PREFIX} ] && table_prefix=""
}

# # prepare the check command
 #
# localhost
check_command="i=0;
[ \${CHECK_SUMMARY} ] && exec 3>&1 >/dev/null
for test in \${CHECK_TESTS}; do
    [ \${CHECK_EXTENDED} ] && [ -n \"\${CHECK_HOST}\" ] && echo -n \${HOSTNAME%%.*}' : '
    [ \${CHECK_QUIET} ] || echo -n 'Testing '\${test}' ... '
    error=0 \${CHECK_FUNCTIONS[\$i]} \${CHECK_OPERANDS[\$i]//,/ } \${CHECK_OPERAND//,/ }
    error=\$? && [ \${error} -ne 0 ] && errors=\"\${errors} \${test}\"
    [ \${error} -gt \${exit:-0} ] && exit=\${error}
    i=\$((i+1))
done
[ \${CHECK_SUMMARY} ] && exec 1>&3 3>&-
[ \${CHECK_SUMMARY} ] && [ ! \${CHECK_QUIET} ] && echo -n \"Tests in error on \${HOSTNAME%%.*} ... \"
[ -n \"\${errors}\" ] && [ \${CHECK_SUMMARY} ] && echo \"\${errors# *}\"
[ -z \"\${errors}\" ] && [ \${CHECK_SUMMARY} ] && [ ! \${CHECK_QUIET} ] && echo"

# if remote host: export all CHECK_* variables and local functions to the remote shell
[ -n "${CHECK_HOST}" ] && check_command="PATH=\"\${PATH}:\${CHECK_PATH}\"; $(get_functions); ${check_command}; exit \${exit:-0}"

# if remote host: ask password
[ -n "${CHECK_HOST}" ] && [ ${CHECK_PASSWORD} ] && while [ ${CHECK_PASSWORD} -ne 0 ]; do
    echo -n "Password: " && read -s password && echo && [ -n "${password}" ] && PASSWORD="${PASSWORD} ${password}"
    CHECK_PASSWORD=$((${CHECK_PASSWORD} - 1))
done

# #
 #
# lock to prevent other process running
LOCK="${CHECK_TMP}/.lock-${0##*/}"
set -o noclobber
(echo "$$" > $LOCK) 2>/dev/null && trap "rm ${LOCK}; exit" HUP INT TERM || error=${CHECK_ERROR_LOCKED}
set +o noclobber
[ ${error:-0} -ne 0 ] && exit=${error} && echo "ERROR : $(basename $0) is LOCKED on ${HOSTNAME}. Please remove ${LOCK}" && exit ${exit}

# get list of tests from argv
TESTS="$@"

# select all tests
[ -n "${CHECK_ALL}" ] && TESTS="${TESTS} $(compgen -A function check_| sed 's/^check_//')"

# # Launch tests on all hosts (default to: localhost)
 #
# launch tests
for check_host in ${CHECK_HOST:-localhost}; do
    check_tests="${TESTS}"; check_profile=""
    # overload $HOSTNAME
    [ "${check_host}" != "localhost" ] && HOSTNAME="${check_host}"
    # if no input, try to define current profile from hostname
    [ -z "${check_tests}" ] && for profile in $(compgen -v PROFILE_); do
        # if we found a PROFILE_ variable that looks like the hostname
        case "${HOSTNAME/-/}" in
            *${profile/PROFILE_/}*)
                check_profile="${check_profile} ${profile}"
                ;;
        esac
    done

    # if no input, use PROFILE_DEFAULT tests
    [ -n "${check_tests}" ] || check_tests="${PROFILE_DEFAULT:-}"
    # then add tests from profiles
    for profile in ${check_profile}; do
        # check if profile is defined
        [ -n "${!profile}" ] && check_tests="${check_tests} ${!profile}" || [ ${CHECK_QUIET} ] || echo "WARNING: ${profile} is not a valid profile" >&2
    done

    # remove duplicate tests
    tests="$(echo $check_tests |xargs -n1 |awk '!t[$0]++' |xargs)"
    # get a list of tests, functions and operands
    i=0; CHECK_TESTS=""; CHECK_FUNCTIONS=""; CHECK_OPERANDS=""
    for test in ${tests}; do
        # check if function is defined, or search for a defined function and an operand
        check_function="check_${test}"; check_operand=""
        while [ "${check_function}" != 'check' ]; do
            type ${check_function} >/dev/null 2>&1 && break
            case ${check_function} in
                *://*)
                    [ -z "${check_operand}" ] && check_operand="${check_function##*://}" || check_operand="${check_function##*://}_${check_operand}"
                    check_function="${check_function%://*}"
                    ;;
                *)
                    [ -z "${check_operand}" ] && check_operand="${check_function##*_}" || check_operand="${check_function##*_}_${check_operand}"
                    check_function="${check_function%_*}"
                    ;;
            esac
        done
        # test does not exist
        [ "${check_function}" = 'check' ] && {
            [ ${CHECK_QUIET} ] || echo "WARNING: ${test} is not a valid test" >&2
            [ ${exit:-0} -gt ${CHECK_ERROR_NOT_FOUND_TEST} ] || exit=${CHECK_ERROR_NOT_FOUND_TEST}
            continue
        }
        # prepare lists
        CHECK_TESTS="${CHECK_TESTS} $test"
        CHECK_FUNCTIONS[$i]="${check_function}"
        CHECK_OPERANDS[$i]="${check_operand}"
        i=$((i+1))
    done

    # launch local tests
    [ "${check_host}" = "localhost" ] && {
        eval "${check_command}"
        break
    }

    # launch remote tests
    user=""
    host="${check_host}"
    # we currently accept only 1 login at a time
    # TODO: expect to test each login/password, actually we keep only the first user
    [ -n "${CHECK_USER}" ] && users="${CHECK_USER#"${CHECK_USER%%[![:space:]]*}"}" && user=${users%%[[:space:]]*}
    # check if host contains a login@
    case "${host}" in
        *@*)
            user=${host%@*}
            host=${host#*@}
            ;;
    esac
    # check if host exists
    ping ${ping_opt} ${host} >/dev/null 2>&1
    error=$? && [ ${error} -gt ${exit} ] && exit=${CHECK_ERROR_HOST_DOWN}
    [ ${error} -ne 0 ] && echo "WARNING: ${host} is down" >&2 && continue
    check_host_command="$(get_variables); ${check_command}"
    if [ -z "${PASSWORD}" ]; then
        ssh -q -o ConnectTimeout=8 -o StrictHostKeyChecking=no ${user:-${USER}}@${host} "${check_host_command}" </dev/null
        # exit code will be the highest error code returned by all the tests
        error=$? && [ ${error} -gt ${exit} ] && exit=${error}
    else
        check expect || exit ${CHECK_ERROR_NOT_FOUND_BINARY}
        set ${PASSWORD}
        PASSWORD_COUNT=$#
        expect <<- EOE
set timeout 32
#match_max 1048576
set index 0
foreach pass {$PASSWORD} {
    set password(\$index) \$pass
    incr index
}
set index 0
set success 0
set command {$check_host_command}
spawn -noecho ssh -q -o NumberOfPasswordPrompts=${PASSWORD_COUNT} -o StrictHostKeyChecking=no ${user:-${USER}}@${host} "\$command"
expect {
    -re "\[P|p]assword: $" {
        send "\$password(\$index)\r"
        incr index
        exp_continue
    }
}
#puts \$expect_out(buffer)
catch wait result
exit [lindex \$result 3]
EOE
        # exit code will be the highest error code returned by all the tests
        error=$? && [ ${error} -gt ${exit} ] && exit=${error}
    fi
done

# unlock
rm -f "${LOCK}" 2>/dev/null && trap - HUP INT TERM

# exit
exit ${exit}
